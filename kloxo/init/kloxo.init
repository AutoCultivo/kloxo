#!/bin/bash
#
# Startup script for Kloxo-MR
#
# chkconfig: - 85 15
# description: The Kloxo-MR is Web hosting control panel
# processname: kloxo
# config: /etc/httpd/conf/kloxo.conf
# pidfile: /var/run/kloxo-hiawatha.pid
#

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

INIT_DIR='/usr/local/lxlabs/kloxo/init'

if ! [ -d ${INIT_DIR} ] ; then
	mkdir -p ${INIT_DIR}
	chown -R lxlabs:lxlabs ${INIT_DIR}
fi

PID_DIR=${INIT_DIR}

if ! [ -d ${PID_DIR} ] ; then
	mkdir -p ${PID_DIR}
	chown -R lxlabs:lxlabs ${PID_DIR}
fi

if ! [ -f ${INIT_DIR}/webused.txt ] ; then
	echo 'hiawatha' > ${INIT_DIR}/webused.txt
fi

WEBUSED=$(cat ${INIT_DIR}/webused.txt)

### 1. PHP-CGI portion

phpcgi_pidfile="/var/run/kloxo-phpcgi.pid"
phpcgi_file="/opt/php52s/bin/php-cgi"
phpcgi_symlink="/opt/php52s/bin/kloxo-phpcgi"
phpcgi_user="lxlabs"
phpcgi_child="4"
phpcgi_max_req="10000"

phpcgi_name=$(basename ${phpcgi_symlink})

phpcgi_sockfile="${INIT_DIR}/${phpcgi_name}.sock"
phpcgi_lockfile="/var/lock/subsys/${phpcgi_name}"

phpcgi_prog="kloxo-phpcgi"
prog_as_slave="/usr/local/lxlabs/${prog}/etc/conf/slave-db.db"
prog_wrapper="kloxo-wrapper.sh"

phpcgi_spawn="env -i PHP_FCGI_CHILDREN=${phpcgi_child} \
	PHP_FCGI_MAX_REQUESTS=${phpcgi_max_req} \
	${phpcgi_symlink} \
	-b ${phpcgi_sockfile} &"

function phpcgi_start() {
	phpcli_load_wrapper

	if ! [ -L ${phpcgi_symlink} ] ; then
		ln -s ${phpcgi_file} ${phpcgi_symlink}
	fi

	if [ -f ${phpcgi_pidfile} ] ; then
		phpcgi_stop
	fi

	echo -n $"Starting ${phpcgi_prog}: "

	daemon ${phpcgi_spawn}

	echo $! > "${phpcgi_pidfile}"

	retval=$?
	echo
	[ ${retval} -eq 0 ] && touch ${phpcgi_lockfile} && touch ${phpcgi_sockfile}
	return ${retval}
}

function phpcgi_stop() {
	echo -n $"Stopping ${phpcgi_prog}: "
	# need 2x killproc because phpcgi_chid
	killproc ${phpcgi_name}
	killproc ${phpcgi_name}
	retval=$?
	echo
	[ ${retval} -eq 0 ] && rm -f ${phpcgi_lockfile} && rm -f ${phpcgi_sockfile}
	return ${retval}
}

function phpcgi_restart() {
	phpcgi_stop
	phpcgi_start

	also_mysql
}

function phpcgi_reload() {
	echo -n $"Reloading ${phpcgi_prog}: "
	killproc ${phpcgi_name} -HUP
	RETVAL=$?
	echo

	also_mysql
}

function phpcli_load_wrapper() {
	cd /usr/local/lxlabs/kloxo/httpdocs
	sh ../sbin/kloxo-wrapper.sh &
}

function phpcgi_rh_status() {
	status ${phpcgi_name}
}

function phpcgi_rh_status_q() {
	phpcgi_rh_status >/dev/null 2>&1
}

### 2.1. HIAWATHA portion

hiawatha_prog="/usr/sbin/hiawatha"
hiawatha_symlink="/usr/sbin/kloxo-hiawatha"
wigwam_prog="/usr/sbin/wigwam"
wigwam_symlink="/usr/sbin/kloxo-wigwam"
hiawatha_name=$(basename ${hiawatha_symlink})
wigwam_name=$(basename ${wigwam_symlink})

hiawatha_conf=${INIT_DIR}

hiawatha_pidfile="/var/run/kloxo-hiawatha.pid"
hiawatha_lockfile="/var/lock/subsys/kloxo-hiawatha"



if [ ! -f ${hiawatha_prog} ]; then
	echo -e "${hiawatha_prog} not found."
	exit 1;
fi

function hiawatha_start() {
	if ! [ -L ${hiawatha_symlink} ] ; then
		ln -s ${hiawatha_prog} ${hiawatha_symlink}
	fi

	if [ -f ${hiawatha_pidfile} ] ; then
		hiawatha_stop
	fi

	echo -n "Starting ${hiawatha_name}: "
	daemon "${hiawatha_symlink} -c ${hiawatha_conf}"

	retval=$?
	echo
	[ ${retval} -eq 0 ] && touch ${hiawatha_lockfile}
	return ${retval}
}

function hiawatha_stop() {
	echo -en "Stopping ${hiawatha_name}: "

	if [ -f ${hiawatha_pidfile} ] ; then
		PID=$(cat ${hiawatha_pidfile})
	else
		PID=''
	fi

	killproc ${hiawatha_name}

	retval=$?
	echo
	[ ${retval} -eq 0 ] && rm -f ${hiawatha_lockfile}
	return ${retval}
}

function hiawatha_restart() {
	hiawatha_stop
	hiawatha_start
}

function hiawatha_reload() {
	hiawatha_restart
}

function hiawatha_config_check() {
	echo -e "Configuration check via ${wigwam_name}..."
	${wigwam_symlink} -c ${hiawatha_conf}
	echo
	echo -e "Configuration check via ${hiawatha_name}..."
	${hiawatha_symlink} -c ${hiawatha_conf} -k
}

function hiawatha_status() {
	pidnum=$(cat ${hiawatha_pidfile})

	if [ -f $hiawatha_pidfile ] && ps ${pidnum} >/dev/null 2>&1 ; then
		echo -e "${hiawatha_name} (pid  ${pidnum}) is running..."
	else
		echo -e "${hiawatha_name} is not running..."
	fi
}

### 2.2. NGINX portion

### 2.3. LIGHTTPD portion

### 3. GENERAL portion

function also_mysql() {
	if ! [ -f ${prog_as_slave} ] ; then
		if [ -f /etc/initd/mysql ] ; then
			if ! $(/etc/init.d/mysql status) ; then
				/etc/init.d/mysql start
			fi
		elif [ -f /etc/initd/mysqld ] ; then
			if ! $(/etc/init.d/mysqld status) ; then
				/etc/init.d/mysqld start
			fi
		fi

		sleep 1
	fi
}

function install_hiawatha() {
	if ! [ -f /usr/sbin/hiawatha ] ; then
		reinstall_hiawatha
	fi
}

function reinstall_hiawatha() {
	if ! [ -f /usr/sbin/hiawatha ] ; then
		YUM_ACTION='reinstall'
	else
		YUM_ACTION='install'
	fi

	yum ${YUM_ACTION} hiawatha -y
	chkconfig hiawatha off
	rm -f /etc/init.d/hiawatha
}

### 4. SELECT portion

case "$1" in
	start)
		phpcgi_$1
		${WEBUSED}_$1
		;;
	stop)
		phpcgi_$1
		${WEBUSED}_$1
		;;
	restart)
		phpcgi_$1
		${WEBUSED}_$1
		;;
	reload)
		phpcgi_$1
		${WEBUSED}_$1
		;;
	wrapper)
		phpcli_load_wrapper
		;;
	update)
		reinstall_${WEBUSED}
		;;
	status)
		phpcgi_rh_$1
		${WEBUSED}_status
		;;
	*)
		echo $"Usage: $0 {start|stop|status|restart|reload|update}"
		exit 2
esac
